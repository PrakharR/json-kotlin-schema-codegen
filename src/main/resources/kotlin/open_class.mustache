{{>header}}{{#packageName}}package {{&packageName}}

{{/packageName}}{{#constraints}}{{>system_imports}}{{#imports}}import {{&.}}
{{#last}}
{{/last}}{{/imports}}{{#schema}}{{#description}}/**
* {{&description}}
*/
{{/description}}{{/schema}}open class {{&className}}(
{{#baseClass}}{{#constraints}}{{#properties}}{{#schema}}{{#description}}        /** {{&safeDescription}} */
{{/description}}{{/schema}}        {{&name}}: {{>type}}{{^isRequired}} = {{!
}}{{#defaultValue}}{{>default_value}}{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}{{/isRequired}},
{{/properties}}{{/constraints}}{{/baseClass}}{{#properties}}{{^baseProperty}}{{#schema}}{{#description}}        /** {{&safeDescription}} */
{{/description}}{{/schema}}        val {{&name}}: {{>type}}{{^isRequired}} = {{!
}}{{#defaultValue}}{{>default_value}}{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}{{/isRequired}}{{^last}},{{/last}}
{{/baseProperty}}{{/properties}}){{#baseClass}} : {{&className}}({{#constraints}}{{#properties}}{{&name}}{{^last}}, {{/last}}{{/properties}}{{/constraints}}){{/baseClass}} {
{{#validationsPresent}}
    init {
{{#properties}}{{>validations}}{{/properties}}    }
{{/validationsPresent}}
    override fun equals(other: Any?): Boolean = this === other || other is {{&className}}{{#baseClass}} && super.equals(other){{/baseClass}} &&{{#properties}}{{^baseProperty}}
            {{&propertyName}} == other.{{&propertyName}}{{^last}} &&{{/last}}
{{/baseProperty}}{{/properties}}
    override fun hashCode(): Int = {{#baseClass}}super.hashCode() xor{{/baseClass}}{{#properties}}{{^baseProperty}}
            {{&propertyName}}.hashCode(){{^last}} xor{{/last}}
{{/baseProperty}}{{/properties}}{{#nestedClasses}}
{{#constraints}}{{>nested_class}}{{/constraints}}{{/nestedClasses}}{{>add_statics}}
}{{/constraints}}
